<?php
/**
 * ENGINE-LEVEL BaseController
 *
 * Is called from ALL ZONES. $this->MODEL is assigned here.
 *
 * PHP version 5.2
 *
 * @author  Peter McConnell <pemcconnell@googlemail.com>
 * @license http://www.gnu.org/copyleft/gpl.html GNU General Public License
 * @link    http://www.twitter.com/DesignThenCode
 */
class BaseController {

    public      $templatevars; // PASSED BACK TO FRAMEWORK

    protected   $dbLayout, // USED IN CMS TO REPRESENT DB LAOUT
                $console, // ./engine/console.php
                $session, // ./engine/session.php
                $settings, // ./settings.php
                $mvc, // ./engine/mvc.php
                $oController,
                $MODEL;

    /**
     * __construct
     * 
     * Initiates all base controller vars
     *
     * @return null
     */
    public function __construct() 
    {
        global $CONSOLE, $SESSION, $SETTINGS, $MVC;
        $this->console = & $CONSOLE;
        $this->session = & $SESSION;
        $this->settings = & $SETTINGS;
        $this->mvc = & $MVC;

        $this->_initTemplateVars();
        $this->_setModel();
    }

    /**
     * index
     * 
     * Default view controller
     *
     * @return null
     */
    public function index() 
    {

    }

    /**
     * controllerEnd
     * 
     * Gets called after all of the controller methods and
     * before the templates are loaded  in
     *
     * @return null
     */
    public function controllerEnd() 
    {
    }

    /**
     * generateFormReport()
     * 
     * Creates HTML that PHP form error handling generates (Public-facing)
     * 
     * @return string HTML ul
     */
    public function generateFormReport() 
    {
        $html = '';
        $isEr = isset($this->console->aMsgs['user']['error'][0]);
        $isSu = isset($this->console->aMsgs['user']['success'][0]);
        if ($isEr || $isSu) {
            $key = 'error';
            $class = 'errors';
            if ($isSu) {
                $key = 'success';
                $class = 'success';
            }
            $html .= '<ul id="formresponse" class="form' . $class . '">';
            foreach ($this->console->aMsgs['user'][$key] as $msg) {
                $html .= '<li>' . $msg . '</li>';
            }
            $html .= '</ul>';
        }
        return $html;
    }

    /**
     * generatePHPErrorReport()
     * 
     * Creates HTML that PHP error handling generates
     * 
     * @return string HTML ul
     */
    public function generatePHPErrorReport() 
    {
        $html = '';
        $this->console->aPhpErrors[] = 'asd';
        if (count($this->console->aPhpErrors) != 0) {
            $html .= '<ul id="phperrors">';
            foreach ($this->console->aPhpErrors as $msg) {
                $html .= '<li>' . $msg . '</li>';
            }
            $html .= '</ul>';
        }
        return $html;
    }

    /**
     * isControllerFourOhFour()
     * 
     * Checks to see if there is a physical file for the requested controller
     * 
     * @return boolean
     */
    public function isControllerFourOhFour() 
    {
        // COVER CONTROLLER ONLY
        if ($this->mvc['CONTROLLERCLASSNAME'] == ucfirst($this->mvc['CONTROLLER'] . 'Controller')) {
            return false;
        }

        // CHECK TEMPLATE
        if ($this->mvc['TEMPLATE']['BODY'] != BASE_PATH . 'mvc' . DS . $this->mvc['ZONE'] . DS . $this->mvc['CONTROLLER'] . '.php') {
            if ($this->mvc['VIEW'] != $this->settings['mvc']['defaults']['view']) {
                if ($this->mvc['TEMPLATE']['BODY'] == BASE_PATH . 'mvc' . DS . $this->mvc['ZONE'] . DS . $this->mvc['CONTROLLER'] . '.' . $this->mvc['VIEW'] . '.php') {
                    return false;
                }
            }
            return true;
        }
        return false;
    }

    /**
     * arrangeByParent
     *
     * @param array $dbData      2D Array of data
     * @param string $parentname Key in $dbData that represents parent
     *
     * @return array 3D array of $dbData stacked into parents
     */
    public function arrangeByParent(array $dbData, $parentname = 'parent')
    {
        $ar_data = array();
        foreach ($dbData as $row) {
            $p = $row[$parentname];
            if ($p == '')
            $p = 0;
            $ar_data[$p][] = $row;
        }
        return $ar_data;
    }

    /**
     * recurringWrapIndexesWithFunction()
     *
     * Create recursive HTML functions for flat / multi-dimensional arrays
     * 
     * @param array $aFunctionParams Function parameters
     * @param mixed $parent          If there is a parent id pass it in here. Defaults to false
     * @param mixed $params          Parameters - these are generated by the function itself
     * 
     * @return array 'html' and 'params' are the two keys
     */
    public function recurringWrapIndexesWithFunction(array $aFunctionParams, $parent = false, $params = false)
    {
        $apcRecKey = APC::createKey(
            'recurringWrapIndexesWithFunction',
            array($aFunctionParams, $parent, $params)
        );
        if (!($aRet = APC::fetch($apcRecKey))) {
            // INITS
            if (!is_array($params)) {
                $params = array(
                    'currentRow' => 0,
                    'stepinc' => 0,
                    'colData' => $aFunctionParams['dbLayout']
                );
            }
            $params['step'] = 0;
            $html = '';
            if (($parent !== false) && isset($aFunctionParams['dbLayout']['parent']) && (gettype($aFunctionParams['dbLayout']['parent']) == 'string')) { // TABLE HAS PARENT SUPPORT
                $dbDataByParent = $this->arrangeByParent($aFunctionParams['dbData'], $aFunctionParams['dbLayout']['parent']);
            } else {
                $dbDataByParent = array();
                if (count($aFunctionParams['dbData']) > 0) { // IF NOT PASSED if(isset($dbDataByParent[$parent])) WILL FAIL (NO DATA FOUND)
                    $parent = 0;
                    $dbDataByParent[$parent] = $aFunctionParams['dbData'];
                }
            }
            if (isset($dbDataByParent[$parent])) {
                $params['maxstep'] = count($dbDataByParent[$parent]);
                $params['currentParentRow'] = 0;
                foreach ($dbDataByParent[$parent] as $row) {
                    $params['currentRow']++;
                    $params['currentParentRow']++;
                    $params['step']++;

                    /* START OPENING AND CLOSING HTML TAG CREATION */
                    $loopingFunctionParams = $aFunctionParams;
                    unset($loopingFunctionParams['dbData']);
                    $loopingFunctionParams['params'] = $params;
                    $html .= $this->{$aFunctionParams['loopingFunction']}($loopingFunctionParams, $row);
                    /* END TR AND TD CREATION */

                    if (isset($dbDataByParent[$row[$aFunctionParams['dbLayout']['id']]]) && (!isset($aFunctionParams['hidesubs']) || ($aFunctionParams['hidesubs'] != true))) {
                        // REMOVE </li>
                        if ($aFunctionParams['loopingFunction'] == 'wrapLIs') {
                            $html = substr($html, 0, -5);
                        }
                        // ADD SUB LEVEL
                        $subParams = $params;
                        $subParams['stepinc']++;
                        $sub = $this->{__FUNCTION__}($aFunctionParams, $row[$aFunctionParams['dbLayout']['id']], $subParams);
                        $params['currentRow'] = $sub['params']['currentRow'];
                        // CREATE UL (if WrapLIs)
                        if ($aFunctionParams['loopingFunction'] == 'wrapLIs') {
                            $html .= '<ul>';
                        }
                        $html .= $sub['html'];
                        // END UL (if WrapLIs)
                        if ($aFunctionParams['loopingFunction'] == 'wrapLIs') {
                            $html .= '</ul>';
                            $html .= '</li>';
                        }
                    }
                }
            } else {
                // NO DATA FOUND
            }
            $aRet = array('html' => $html, 'params' => $params);
            APC::store($apcRecKey, $aRet);
        }
        return $aRet;
    }

    /**
     * wrapLIs
     *
     * @param array $aFunctionParams Function parameters
     * @param array $dbRow           Database row
     *
     * @return string HTML li
     */
    public function wrapLIs(array $aFunctionParams, array $dbRow) 
    {
        // BUILD CSS CLASS
        $aClasses = array();
        $aClasses[] = 'item_' . $aFunctionParams['params']['currentRow'];
        if ($aFunctionParams['params']['currentRow'] == 1) {
            $aClasses[] = 'first';
        }
        if ($aFunctionParams['params']['currentRow'] % 2 == 0) {
            $aClasses[] = 'even';
        } else {
            $aClasses[] = 'odd';
        }
        if ($aFunctionParams['params']['currentRow'] == $aFunctionParams['params']['maxstep']) {
            $aClasses[] = 'last';
        }
        if (is_numeric($aFunctionParams['selectedIndex'])) {
            $aFunctionParams['selectedIndex'] = array($aFunctionParams['selectedIndex']);
        }
        if (is_array($aFunctionParams['selectedIndex']) && in_array($dbRow[$aFunctionParams['dbLayout']['id']], $aFunctionParams['selectedIndex'])) {
            $aClasses[] = 'selected';
        } elseif (($aFunctionParams['dbLayout']['tbl'] == 'pages') && isset($dbRow['type']) && ($dbRow['type'] > 0) && (in_array($dbRow['type'], $aFunctionParams['selectedIndex']))) {
            $aClasses[] = 'selected';
        }
               
        if (!in_array('selected', $aClasses)) {
            // CURRENT ITEM IS NOT THE ACTIVE ITEM
            if (isset($aFunctionParams['activeParents']) && ($aFunctionParams['activeParents'] !== false)) {
                // IS THIS ITEM A PARENT OF THE ACTIVE ITEM
                if (is_numeric($aFunctionParams['activeParents'])) {
                    $aFunctionParams['activeParents'] = array($aFunctionParams['activeParents']);
                }
                if (in_array($dbRow[$aFunctionParams['dbLayout']['id']], $aFunctionParams['activeParents'])) {
                    $aClasses[] = 'activeparent';
                }
            }
        }

        // GENERATE HTML
        $class = ' class="' . implode(' ', $aClasses) . '"';
        $innerhtml = $this->{$aFunctionParams['loopingFunctionInlineWrapper']}($aFunctionParams, $dbRow);

        if ($innerhtml === false) {
            return '';
        }

        $html = '<li' . $class . '>';
        $html .= $innerhtml;
        $html .= '</li>';

        return $html;
    }

    /**
     * wrapTDs
     *
     * @param array $aFunctionParams Function parameters
     * @param array $dbRow           Database row
     *
     * @return string HTML td
     */
    public function wrapTDs(array $aFunctionParams, array $dbRow) 
    {
        // BUILD CSS CLASS
        $aClasses = array();
        $aClasses[] = 'item_' . $aFunctionParams['params']['currentRow'];
        if ($aFunctionParams['params']['currentRow'] == 1) {
            $aClasses[] = 'first';
        }
        if ($aFunctionParams['params']['currentRow'] % 2 == 0) {
            $aClasses[] = 'even';
        } else {
            $aClasses[] = 'odd';
        }
        if ($aFunctionParams['params']['currentRow'] == $aFunctionParams['params']['maxstep']) {
            $aClasses[] = 'last';
        }
        if (is_array($aFunctionParams['selectedIndex']) && in_array($dbRow[$aFunctionParams['dbLayout']['id']], $aFunctionParams['selectedIndex'])) {
            $aClasses[] = 'selected';
        } elseif ($dbRow[$aFunctionParams['dbLayout']['id']] === $aFunctionParams['selectedIndex']) {
            $aClasses[] = 'selected';
        }

        // GENERATE HTML
        $class = ' class="' . implode(' ', $aClasses) . '"';
        $html = '<td' . $class . '>';
        $html .= $this->{$aFunctionParams['loopingFunctionInlineWrapper']}($aFunctionParams, $dbRow);
        $html .= '</td>';

        return $html;
    }

    /**
      * wrapOptions
      *
      * @param array $aFunctionParams Function parameters
      * @param array $dbRow           Database row information
      *
      * @return string HTML option
      */
    public function wrapOptions(array $aFunctionParams, array $dbRow) 
    {
        $selected = '';
        if ($dbRow[$aFunctionParams['dbLayout']['id']] == $aFunctionParams['selectedIndex']) {
            $selected = ' selected="selected"';
        }
        $html = '<option value="' . 
                $dbRow[$aFunctionParams['dbLayout']['id']] . '"' . 
                $selected . '>';
        $html .= $this->
                    {$aFunctionParams['loopingFunctionInlineWrapper']}
                    ($aFunctionParams, $dbRow);
        $html .= '</option>';

        return $html;
    }

    /**
     * getVal
     *
     * @param string $sName key of $_POST or $_GET value
     *
     * @return string Value
     */
    public function getVal($sName) 
    {
        $val = isset($_POST[$sName]) ? $_POST[$sName] : '';
        if (!$val) {
            $val = isset($_GET[$sName]) ? $_GET[$sName] : '';
        }
        return $val;
    }

    /**
     * createPageLinkWithAnchor
     *
     * @param array $aParams Database row parameters
     * @param array $row     Database row information
     *
     * @return string HTML anchor
     */
    public function createPageLinkWithAnchor(array $aParams, array $row) 
    {
        $uri = $this->createPageLink($row, $aParams);
        $html = '<a href="' . $uri . '">' . stripslashes($row['menuName']) . '</a>';
        return $html;
    }

    /**
     * createPageLink
     *
     * @param array $row     Database row
     * @param array $aParams Database parameters
     *
     * @return string url of page
     */
    public function createPageLink(array $row, array $aParams = array()) 
    {
        $uri = false;
        if (isset($row['type'])) {
            if ($row['type'] < 1) { // NORMAL PAGES AND ABSOLUTE LINKS
                if ($row['type'] == 0) { // NORMAL PAGES
                    if ($row['target'] != '') { // CUSTOM TARGET
                        $uri =  BASE_HREF . 
                                preg_replace('@^\.?/@', '', $row['target']);
                    } else {
                        $uri =  BASE_HREF . 
                                $this->settings['mvc']['defaults']['pagetarget'] . 
                                '/' . $row['id'] . '/' . 
                                HTML::createCleanURL($row['menuName']);
                    }
                } else { // ABSOLUTE LINK
                    $uri = $row['target'];
                }
                if (isset($aParams['fromType'])) {
                    if (strpos($uri, '?')===false) {
                        $uri .= '?';
                    } else { 
                        $uri .= '&';
                    }
                    $uri .= '_tp=' . $aParams['fromType'];
                }
            } else {
                // LINK TO INTERNAL PAGE
                $nrow = $this->MODEL->fetchPage($row['type']);
                if ($nrow) {
                    $aParams['fromType'] = $row['id'];
                    return $this->createPageLink($nrow, $aParams);
                }
            }
        }
        if ($uri == false) {
            return $row['target'];
        }
        return $uri;
    }

    /**
     * uploadFile
     *
     * @param string $inputname Name of input (name="?")
     * @param string $sFolder   Name of folder in the upload directory to insert file
     *
     * @return int File ID. 0 if failed
     */
    public function uploadFile($inputname, $sFolder = 'cms_image') 
    {
        $file = Upload::uploadFile($inputname, $sFolder);
        if ($file) {
            return $this->MODEL->insertFileRecord($file);
        }
        return 0;
    }

    /**
     * crossValidate
     * 
     * @param array $fields Fields to validate
     *
     * @return null
     */
    public function crossValidate(array $fields) 
    {
        $val = $this->setValidation();
        $Validate = new Validate;
        foreach ($fields as $k => $v) {
            if (isset($val[$k])) {
                // VALIDATE THIS DATA
                $msg = false;
                $param = false;
                if (!is_array($val[$k])) { // Quick call, eg 'minlen'
                    $type = $val[$k];
                } else {
                    $type = $val[$k][0];
                    if (isset($val[$k][1])) {
                        $msg = $val[$k][1];
                    }
                    if (isset($val[$k][2])) {
                        $param = $val[$k][2];
                    }
                }
                $Validate->{$type}((string) $v, $msg, $param);
            }
        }
    }

    /**
     * hardCodeModel
     *
     * @param string $MODEL name of model
     * 
     * @return null
     */
    public function hardCodeModel($MODEL) 
    {
        $this->MODEL = & $MODEL;
    }

    /**
     * setValidation
     *
     * @return array Array of input names and associated validation parameters
     */
    public function setValidation() 
    {
        return array();
    }

    /**
     * inputDefaults
     *
     * @return array Array of input names and associated parameters
     */
    public function inputDefaults() 
    {
        return array();
    }

    /**
     * setModel
     *
     * Initiates the MODEL object
     *
     * @return null
     */
    private function _setModel() 
    {
        if (is_string($this->mvc['MODELCLASSNAME']) || is_object($this->mvc['MODELCLASSNAME'])) {
            $this->MODEL = new $this->mvc['MODELCLASSNAME'];
        } else {
            $this->console->error('Failed attempt to setModel.');
        }
    }

    /**
     * initTemplateVars
     *
     * Sets some default template vars for all zones
     * 
     * @return null
     */
    private function _initTemplateVars() 
    {
        $this->templatevars['metatitle'] = '';
        $this->templatevars['metadescription'] = '';
        $this->templatevars['metakeywords'] = '';
        $this->templatevars['GBL_formreport'] = '';
        $this->templatevars['GBL_footerscripts'] = array();
        $this->templatevars['GBL_inlinefooterscripts'] = array();
        $this->templatevars['GBL_stylesheets'] = array();
        $this->templatevars['GBL_author'] = $this->settings['info']['author'];
        $this->templatevars['GBL_version'] = $this->settings['info']['version'];
        $this->templatevars['GBL_lastupdated'] = $this->settings['info']['lastupdated'];
    }

    /**
     * __destruct
     */
    public function __destruct() 
    {

    }

}